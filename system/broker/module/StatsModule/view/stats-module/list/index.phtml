<? $this->HeadScript()->appendFile('/js/stats/table.js','text/javascript'); ?>
<? $this->HeadScript()->appendFile('/js/daterangerpicker/moment.js','text/javascript'); ?>
<? $this->HeadScript()->appendFile('/js/daterangerpicker/daterangerpicker.js','text/javascript'); ?>
<? $this->HeadScript()->appendFile('/js/jqplugins/w2ui.js','text/javascript'); ?>
<? $this->headLink()->appendStylesheet('/css/daterangerpicker/daterangerpicker.css'); ?>
<? $this->headLink()->appendStylesheet('/css/jqplugins/w2ui.css'); ?>
<? $this->headLink()->appendStylesheet('/css/stat/stat.css'); ?>

<?
use Socnet\Logic\VkLogic;
foreach ($timeSets as $timeSet) {
    if ($timeSet === $selectedSet) {
        echo $timeSet;
    } else {
        ?><a href="?timeSet=<?= $timeSet ?>"><?= $timeSet ?></a><?
    }
    ?>&nbsp;&nbsp;|&nbsp;&nbsp;<?
}

echo date('Y-m-d H:i:s', $fromTime) . ' - ' . date('Y-m-d H:i:s', $toTime)
?>

<style>
    div.FixedHeader_Cloned th,
    div.FixedHeader_Cloned td {
        background-color: white !important;
    }

    div.container {
        width: 100%;
    }
</style>
<div style="width:100%">
<div id="filter" style="float:left; padding:20px; width:299px">
    <script>
        filter = {
            _callbackOnAfterClick : null,
            _callbackOnAfterClickDelay : 1500,      // delay (after last click) before _callbackOnAfterClick fired
            _callbackOnAfterClickTimer : false,
            setOnAfterChangedCallback : function(callback, delay) {
                this._callbackOnAfterClick      = callback;
                this._callbackOnAfterClickDelay = delay;
            }
        };
    </script>
    <div id="date_filter">
        <strong>Фильтр по времени:</strong><br>
        <div id="reportrange" class="pull-right" style="margin-bottom: 10px; background: #fff; cursor: pointer; padding: 5px 10px; border: 1px solid #ccc; width: 100%">
            <i class="glyphicon glyphicon-calendar fa fa-calendar"></i>&nbsp;
            <span></span> <b class="caret"></b>
        </div>
    </div>

    <div id="status_filter">
        <strong>Фильтры по статусу:</strong><br>
        <label><input data-status-id="<?=VkLogic::AD_STATUS_PLAY?>" type="checkbox" /><span class="status-name">запущенные</span></label><br>
        <label><input data-status-id="<?=VkLogic::AD_STATUS_STOP?>" type="checkbox" /><span class="status-name">остановленные</span></label><br>
        <label><input data-status-id="<?=VkLogic::AD_STATUS_DELETE?>" type="checkbox" /><span class="status-name">удаленные</span></label><br>
    </div>
    <div id="cabinets_filter">
        <strong>Фильтры по кампаниям:</strong><br>
        <?
        foreach ($campaignsTree as $cabinet) {
            echo '<div class="campaigns-list-container"><span class="client-minus-plus plus"></span>';
            echo '<span class="client-title" title="' . $cabinet['id'] . '">' . $cabinet['name'] . "</span><br>";
            echo '<div class="campaigns-list">';
            foreach ($cabinet['childNodes'] as $campaign) {
                echo '<label title="' . $campaign['id'] . '"><input data-campaign-id="' . $campaign['id'] . '" type="checkbox" /> <span class="campaign-name">' .
                    $campaign['name'] . "</span></label><br>";
            }
            echo '</div>';
            echo '</div>';
        }
        ?>
    </div>
    <script>
        filter.statuses = {
            parent : filter,
            _selectedStatuses : [],
            init : function() {
                var self = this;

                $('#status_filter').find(':checkbox').each(function() {
                    $(this).attr('disabled', true);
                    $(this).prop("indeterminate", true);
                    $(this).change(self._getOnClick(self));
                });
            },
            getSelectedStatuses : function() {
                return this._selectedStatuses;
            },
            setSelectedStatuses : function(selectedStatuses) {
                this._selectedStatuses = selectedStatuses;

                $('#status_filter').find(':checkbox').each(function() {
                    $(this).removeAttr('disabled');
                    $(this).prop("indeterminate", false);
                });

                this.reRender();
            },
            reRender : function() {
                var self = this;

                $('#status_filter').find(':checkbox').each(function() {
                    var id = parseInt($(this).attr('data-status-id'));
                    if (self._selectedStatuses.indexOf(id) != -1) {
                        $(this).attr('checked', true);
                    } else {
                        $(this).attr('checked', false);
                    }
                });
            },
            _getOnClick : function(self) {
                return function () {
                    var statusId = parseInt($(this).attr('data-status-id'));
                    var index;
                    console.log('before:');
                    console.log(self._selectedStatuses);

                    console.log($(this).is(':checked'));
                    if ($(this).is(':checked')) {
                        self._selectedStatuses.push(statusId)
                    } else {
                        index = self._selectedStatuses.indexOf(statusId);
                        if (index > -1) {
                            self._selectedStatuses.splice(index, 1);
                        }
                    }

                    if (self.parent._callbackOnAfterClick !== null) {
                        if (self.parent._callbackOnAfterClickTimer !== false) {
                            window.clearTimeout(self.parent._callbackOnAfterClickTimer);
                        }

                        self.parent._callbackOnAfterClickTimer = window.setTimeout(
                            self.parent._callbackOnAfterClick,
                            self.parent._callbackOnAfterClickDelay
                        );
                    }
                    console.log('after:');
                    console.log(self._selectedStatuses);

                };
            }
        };

        filter.campaigns = {
            parent : filter,
            _selectedCampaigns    : [],
            init : function() {
                var self = this;

                $('#cabinets_filter').find(':checkbox').each(function() {
                    $(this).attr('disabled', true);
                    $(this).prop("indeterminate", true);
                    $(this).change(self._getOnClick(self));
                });
            },
            getSelectedCampaigns : function() {
                return this._selectedCampaigns;
            },
            setSelectedCampaigns : function(selectedCampaigns) {
                this._selectedCampaigns = selectedCampaigns;

                $('#cabinets_filter').find(':checkbox').each(function() {
                    $(this).removeAttr('disabled');
                    $(this).prop("indeterminate", false);
                });

                this.reRender();
            },
            reRender : function() {
                var self = this;

                $('#cabinets_filter').find(':checkbox').each(function() {
                    var id = parseInt($(this).attr('data-campaign-id'));
                    if (self._selectedCampaigns.indexOf(id) != -1) {
                        $(this).attr('checked', true);
                    } else {
                        $(this).attr('checked', false);
                    }
                });
            },
            _getOnClick : function(self) {
                return function () {
                    var campaignId = parseInt($(this).attr('data-campaign-id'));
                    var index;
console.log('before:');
console.log(self._selectedCampaigns);

console.log($(this).is(':checked'));
                    if ($(this).is(':checked')) {
                        self._selectedCampaigns.push(campaignId)
                    } else {
                        index = self._selectedCampaigns.indexOf(campaignId);
                        if (index > -1) {
                            self._selectedCampaigns.splice(index, 1);
                        }
                    }

                    if (self.parent._callbackOnAfterClick !== null) {
                        if (self.parent._callbackOnAfterClickTimer !== false) {
                            window.clearTimeout(self.parent._callbackOnAfterClickTimer);
                        }

                        self.parent._callbackOnAfterClickTimer = window.setTimeout(
                            self.parent._callbackOnAfterClick,
                            self.parent._callbackOnAfterClickDelay
                        );
                    }
console.log('after:');
console.log(self._selectedCampaigns);

                };
            }
        };

        filter.statuses.init();
        filter.campaigns.init();
    </script>
</div>
<div id="table-ads-controls">
    <input title="Все объявления" id="main-ads-checkbox" type="checkbox""/>
    <button title="Запустить" id="button-ad-play" data-action="play">
        <i class="icon-play"></i>
    </button>
    <button title="Остановить"  id="button-ad-stop" data-action="stop">
        <i class="icon-pause"></i>
    </button>
    <button title="Удалить" id="button-ad-delete" data-action="delete">
        <i class="icon-trash"></i>
    </button>
    <button disabled id="button-ad-copy" data-action="copy">
        <i title="Копировать" class="icon-tags"></i>
    </button>
    <button disabled title="Изменить настройки" id="button-ad-settings">
        <i style="margin-right: 5px" class="icon-th-list"></i><span>Настройка</span>
    </button>
    <button title="Обновить" id="button-ad-refresh" data-action="refresh">
        <i style="margin-right: 5px" class="icon-refresh"></i><span>Обновить</span>
    </button>
</div>
<div id="main-table">
    <table id="dataTable" style="font-size:12px; margin-top: 10px;" class="display compact" cellspacing="0" cellpadding="0">
        <thead>
            <tr>
                <th>Campaign_id</th>
                <th></th>
                <th>Кампания</th>
                <th>ID</th>
                <th>Объявление</th>
                <th>Состояние</th>
                <th title="Return on investment">ROI</th>
                <th>Прибыль</th>
                <th>Выручка</th>
                <th>Затраты</th>
                <th title="Cost per lead">CPL</th>
                <th>Лидов</th>
                <th title="Cost per click">CPC</th>
                <th title="Click-through rate">CTR</th>
                <th>Кликов</th>
                <th>Показов</th>
                <th title="Return on total assets">ROTA</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
        <tfoot>
            <tr class="bold center">
                <td>Итого:</td>
                <td></td>
                <td>-</td>
                <td>-</td>
                <td>-</td>
                <td>-</td>
                <td>-</td>
                <td style="text-align: right"></td>
                <td style="text-align: right"></td>
                <td style="text-align: right"></td>
                <td>-</td>
                <td>-</td>
                <td>-</td>
                <td>-</td>
                <td style="text-align: right"></td>
                <td style="text-align: right"></td>
                <td>-</td>
            </tr>
        </tfoot>
    </table>
</div>
</div>

<script>
$(document).ready(function() {
    /* Custom filtering function which will search data in column four between two values */
    $.fn.dataTable.ext.search.push(
        function( settings, data, dataIndex ) {
console.log(settings, data, dataIndex);
            return false;
        }
    );

    dataTable = $('#dataTable').DataTable({
        "oLanguage": {
            "sInfo": ""
        },
        "processing": true,
        "serverSide": true,
        "ajax": {
            url : "/stats/list/ajax",
            type : 'POST'
        },
        "columnDefs": [
            {
                "targets": [ 0 ],
                "visible": false,
                "searchable": false
            }
        ],
        "stateSave": true,
        "stateDuration": 0,  // infinite
        "paging":   false,
        "language": {
            "decimal": ",",
            "thousands": " "
        },
        colReorder: {
            realtime: true
        },
        dom: 'RT<"clear">lfrtip',
        tableTools: {
            //"sSwfPath": "../swf/copy_csv_xls_pdf.swf",
            "aButtons": []
        },
        "initComplete": function(settings, json) {
            var api = new $.fn.dataTable.Api(settings);
            console.log('init complete');

            window.filter.setOnAfterChangedCallback((function(dataTableApi) {
                return function() {
                    var filterData = {};
                    var state = dataTableApi.state();

                    if (!!state.columns[0]['search']['search']) {
                        filterData = JSON.parse(state.columns[0]['search']['search']);
                    }

                    filterData.statuses  = window.filter.statuses.getSelectedStatuses();
                    filterData.campaigns = window.filter.campaigns.getSelectedCampaigns();

                    dataTableApi.column([0]).search(JSON.stringify(filterData)).draw();
                };
            })(api), 1100);
        },
        "drawCallback" : function(settings) {
            statTableHelper.init();
        },
        "stateLoadParams" : function (settings, data) {
console.log('stateLoadParams', data.columns[0].search.search);
            var filterData = {};

            if (data.columns[0].search.search) {
                filterData = JSON.parse(data.columns[0].search.search);
            }

            filterData.toTime   = <?=(int)$toTime?>;
            filterData.fromTime = <?=(int)$fromTime?>;
console.log(filterData);

            if (!filterData.hasOwnProperty('campaigns')) {
                window.filter.campaigns.setSelectedCampaigns([]);
            } else {
                window.filter.campaigns.setSelectedCampaigns(filterData.campaigns);
            }

            if (!filterData.hasOwnProperty('statuses')) {
                window.filter.statuses.setSelectedStatuses([]);
            } else {
                window.filter.statuses.setSelectedStatuses(filterData.statuses);
            }

            data.columns[0].search.search = JSON.stringify(filterData);
        },
        "stateSaveParams" : function(settings, data) {
console.log('stateSaveParams');
            var filterData = {};

            if (!data.columns[0].search.search) {
                data.columns[0].search.search = '{}';
            }

            filterData = JSON.parse(data.columns[0].search.search);
            filterData.campaigns = window.filter.campaigns.getSelectedCampaigns();
console.log(filterData.campaigns);
            data.columns[0].search.search = JSON.stringify(filterData);
        }
    });

    var filter = [];
    var state = dataTable.state();
    if (state && state.columns && state.columns[0]['search'] && state.columns[0]['search'] && state.columns[0]['search']['search']) {
        console.log(state.columns[0]['search']['search']);
    }

    $('#main-ads-checkbox').click(function (e) {
        var isChecked = e.currentTarget.checked;
        $('#dataTable').find('input[type=checkbox]').each(function()
        {
           if (isChecked) {
               $(this).prop("checked", true);
               $('#button-ad-settings').prop('disabled', false);
           } else {
               $(this).prop("checked", false);
               $('#button-ad-settings').prop('disabled', true);
           }
        })
    });

    $('#button-ad-play, #button-ad-stop, #button-ad-delete, #button-ad-copy').each(
        function(){
            var isNeedConfirm = $(this).prop('id') == 'button-ad-delete';
            $(this).click(function (e) {
                if ($('#dataTable').find('input[type=checkbox]:checked').length) {
                    if (isNeedConfirm) {
                        w2confirm({msg:'Объявления будут удалены, восстановить их невозможно.<br> Вы уверены?',
                            title: 'Удалить объявления',
                            yes_text: 'Да',
                            no_text: 'Нет',
                            yes_callBack: function () {
                                statTableHelper.sendData($('#button-ad-delete'))
                            }
                        })
                    } else {
                        statTableHelper.sendData($(this));
                    }
                }
            });
        }
    );

    $('#button-ad-settings').click(
        statTableHelper.changeAdsSettings
    );

    $('#button-ad-refresh').click(
        function(){
            dataTable.draw();
            dataTable.colReorder.reset();
            $('#main-ads-checkbox').prop('checked', false);
            $('#button-ad-settings').prop('disabled', true);
        }
    );

    if ($.fn.dataTable.FixedHeader) {
        new $.fn.dataTable.FixedHeader(table, {
            zTop: 1040,
            bottom: true
        });
    }

    //$('#dataTable').fixedHeaderTable({footer : true, width: '900px', height: '500px', fixedColumns: 1});
});
</script>
<script>
    $(function(){
        $('.campaigns-list-container').each(function(){
            var tbl = $(this);
            if (tbl.find('input[checked]').length) {
                $('.campaigns-list', tbl).toggle();
                $('span.client-minus-plus', tbl).addClass('minus');
                $('span.client-minus-plus', tbl).removeClass('plus');
            }
            $('span.client-title, span.client-minus-plus', tbl).click(function(){
                $('span.client-minus-plus', tbl).toggleClass('minus plus');
                $('.campaigns-list', tbl).toggle();
            });
        });
        moment.locale('ru');
        function cb(start, end) {
            $('#reportrange span').html(start.format('D MMM YYYY') + ' - ' + end.format('D MMM YYYY'));
        }
        cb(moment().subtract(0, 'days'), moment());

        $('#reportrange').daterangepicker({
            ranges: {
                'Сегодня': [moment(), moment()],
                'Вчера': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                'Последние 7 дней': [moment().subtract(6, 'days'), moment()],
                'Последние 30 дней': [moment().subtract(29, 'days'), moment()],
                'Текущий месяц': [moment().startOf('month'), moment().endOf('month')],
                'Предыдущий месяц': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
            },
            "locale": {cancelLabel: 'Отмена', applyLabel: 'Показать', customRangeLabel: 'Задать период'}
        }, cb);

        $('.navbar .nav li#home').removeClass("active");
        $('.navbar .nav li#stat').addClass("active");
    });

</script>

<?include('popups/change-settings.phtml');?>


